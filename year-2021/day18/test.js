const assert = require('assert')
const { part1, part2, getMagnitude, parseSnailfishNumber, performExplosion, performSplit, reduceSnailfishNumber, snailfishAddition } = require('./script')

const input = 
`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`

const input2 = 
`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]`

describe('Day 18: Snailfish', () => {
    describe('Part One', () => {
        it('should return the correct magnitude', () => {
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[9, 1]')), 29)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[3,4],5]')), 61)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[1,2],[[3,4],5]]')), 143)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]')), 4140)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[[[0,7],4],[[7,8],[6,0]]],[8,1]]')), 1384)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[[[1,1],[2,2]],[3,3]],[4,4]]')), 445)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[[[3,0],[5,3]],[4,4]],[5,5]]')), 791)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[[[5,0],[7,4]],[5,5]],[6,6]]')), 1137)
            assert.strictEqual(getMagnitude(parseSnailfishNumber('[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]')), 3488)
        })
        it('should perform an explosion', () => {
            assert.strictEqual(performExplosion('[[[[0,7],4],[7,[[8,4],9]]],[1,1]]'), '[[[[0,7],4],[15,[0,13]]],[1,1]]')
            assert.strictEqual(performExplosion('[[[[0,7],4],[10,[[8,4],9]]],[1,1]]'), '[[[[0,7],4],[18,[0,13]]],[1,1]]')
            assert.strictEqual(performExplosion('[[[[0,7],4],[10,[[8,4],10]]],[1,1]]'), '[[[[0,7],4],[18,[0,14]]],[1,1]]')
            assert.strictEqual(performExplosion('[[[[[9,8],1],2],3],4]'), '[[[[0,9],2],3],4]')
            assert.strictEqual(performExplosion('[7,[6,[5,[4,[3,2]]]]]'), '[7,[6,[5,[7,0]]]]')
            assert.strictEqual(performExplosion('[[6,[5,[4,[3,2]]]],1]'), '[[6,[5,[7,0]]],3]')
            assert.strictEqual(performExplosion('[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]'), '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]')
            assert.strictEqual(performExplosion('[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]'), '[[3,[2,[8,0]]],[9,[5,[7,0]]]]')
            assert.strictEqual(performExplosion('[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,0],[[9,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,0],[[9,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[0,[11,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[0,[11,8]]]]]'), '[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[11,0]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[10,[[11,9],[11,0]]]]'), '[[[[4,0],[5,4]],[[7,7],[0,13]]],[10,[[11,9],[11,0]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[0,[6,7]]]],[10,[[11,9],[11,0]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[17,[[11,9],[11,0]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[0,13]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[0,[6,7]]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[14,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,7],[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,10],[[0,[11,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[0,[11,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[11,0],[[9,3],[8,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[11,0],[[9,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[11,9],[0,[11,8]]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[11,9],[0,[11,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[11,9],[11,0]]]]')
            assert.strictEqual(performExplosion('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[[5,6],9],[11,0]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,10]],[[0,15],[11,0]]]]')
            assert.strictEqual(performExplosion('[[[[12,12],[6,14]],[[15,0],[17,[8,1]]]],[2,9]]'), '[[[[12,12],[6,14]],[[15,0],[25,0]]],[3,9]]')
        })
        it('should perform a split', () => {
            assert.strictEqual(performSplit('[[[[0,7],4],[15,[0,13]]],[1,1]]'), '[[[[0,7],4],[[7,8],[0,13]]],[1,1]]')
            assert.strictEqual(performSplit('[[[[0,7],4],[[7,8],[0,13]]],[1,1]]'), '[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,7],[0,13]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[0,[6,7]]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,7],[6,0]]],[14,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,7],[[[3,7],[4,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,10],[[0,[11,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[0,[11,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,10],[[0,[11,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[0,[11,3]],[[6,3],[8,8]]]]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[11,9],[11,0]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[7,[5,5]],[[[5,6],9],[11,0]]]]')
            assert.strictEqual(performSplit('[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[11,0]]]]'), '[[[[4,0],[5,4]],[[7,0],[[7,8],5]]],[10,[[11,9],[11,0]]]]')
        })
        it('should reduce a snailfish number', () => {
            assert.strictEqual(reduceSnailfishNumber('[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]'), '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]')
            assert.strictEqual(reduceSnailfishNumber('[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]'), '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]')
            assert.strictEqual(reduceSnailfishNumber('[[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]],[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]]'), '[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]')
            assert.strictEqual(reduceSnailfishNumber('[[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]],[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]]'), '[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]')
            assert.strictEqual(reduceSnailfishNumber('[[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]],[2,9]]'), '[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]')
        })
        it('should perform addition', () => {
            assert.strictEqual(snailfishAddition(input2), '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]')
        })
        it('should return the magnitude of a final sum', () => {
            assert.strictEqual(part1(input), 4140)
            assert.strictEqual(part1(input2), 3488)
        })
    })

    describe('Part Two', () => {
        it('should return the largest magnitude of any sum of two different snailfish numbers', () => {
            assert.strictEqual(part2(input), 3993)
        })
    })
})

